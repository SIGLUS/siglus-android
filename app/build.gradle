apply plugin: 'com.android.application'
apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: 'com.github.spotbugs'
apply from: "${rootProject.projectDir}/gradle/jacoco.gradle"
apply from: "${rootProject.projectDir}/gradle/appcenter.gradle"

import com.github.spotbugs.snom.SpotBugsTask

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "org.openlmis.core"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        flavorDimensions "1"
        if (project.hasProperty("prodsim")) {
            versionCode((new Date().getTime() / 1000).toInteger())
            versionName "$prodsim"
        } else {
            versionCode androidVersionCode.toInteger()
            versionName semanticVersion
        }
        multiDexEnabled true
    }

    signingConfigs {
        debug {
            storeFile file("../scripts/debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
        release {
            storeFile file("../scripts/lmis_moz.jks")
            storePassword System.getenv("KSTOREPWD")
            keyAlias "clintonhealthaccess"
            keyPassword System.getenv("KEYPWD")
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {
        local {
            applicationId 'org.openlmis.core.local'
        }
        dev {
            applicationId 'org.openlmis.core.dev'
        }
        qa {
            applicationId 'org.openlmis.core.qa'
        }
        mgt {
            applicationId 'org.openlmis.core.mgt'
        }
        integ {
            applicationId 'org.openlmis.core.integ'
        }
        uat {
            applicationId 'org.openlmis.core.uat'
        }
        training {
            applicationId 'org.openlmis.core.training'
        }
        prd {
            applicationId 'org.openlmis.core'
        }
    }

    //the following code will change release apk file names to: {applicationId}-{versionCode}-release.apk
    //this is needed for in-app upgrade to work, because it's how the upgrade server matches package names
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (outputFileName.endsWith('.apk') && outputFileName.contains("-release")) {
                outputFileName = "${applicationId}-${versionCode}-release.apk"
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.includeAndroidResources = true
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
}

task checkstyle(type: Checkstyle) {
    configFile file("config/checkstyle/checkstyle.xml")
    source 'src/main'
    include '**/*.java'
    exclude '**/gen/**'
    exclude '**/migrations/**'
    classpath = files()
    ignoreFailures = false
    reports {
        html.enabled = true
        xml.enabled = false
    }
}

task pmd(type: Pmd) {
    ruleSetFiles = files("config/pmd/ruleset.xml")
    ignoreFailures = false
    consoleOutput = true
    ruleSets = []
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    reports {
        html.enabled = true
        xml.enabled = false
    }
}

tasks.withType(SpotBugsTask) {
    ignoreFailures = false
    effort = "max"
    reportLevel = "high"
    reports {
        html.enabled = true
        xml.enabled = false
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    // modified version or package
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.annotation:annotation:1.2.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation "androidx.constraintlayout:constraintlayout:2.0.4"
    implementation 'com.github.hackware1993:MagicIndicator:1.7.0'

    implementation 'com.facebook.stetho:stetho:1.5.1'
    implementation 'com.facebook.stetho:stetho-okhttp:1.5.1'
    implementation "com.microsoft.appcenter:appcenter-analytics:${rootProject.ext.appCenterSdkVersion}"
    implementation "com.microsoft.appcenter:appcenter-crashes:${rootProject.ext.appCenterSdkVersion}"
    implementation 'com.github.viethoa:fastscroller:1.2.0'
    implementation 'io.reactivex:rxjava:1.0.14'
    implementation 'io.reactivex:rxandroid:1.0.1'
    implementation 'com.squareup.retrofit:retrofit:1.9.0'
    implementation 'com.squareup.okhttp:okhttp-urlconnection:2.2.0'
    implementation 'com.squareup.okhttp:okhttp:2.2.0'
    implementation 'com.j256.ormlite:ormlite-android:4.45'
    implementation 'org.apmem.tools:layouts:1.10@aar'
    // don`t upgrade version, it will make crash on android api level 20 device.
    implementation 'org.apache.commons:commons-lang3:3.6'
    implementation 'net.danlew:android.joda:2.9.1'
    implementation 'org.roboguice:roboblender:3.0.1'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'org.projectlombok:lombok:1.18.20'
    annotationProcessor "org.projectlombok:lombok:1.18.20"
    implementation 'org.roboguice:roboguice:3.0.1'
    annotationProcessor 'org.roboguice:roboblender:3.0.1'
    implementation 'org.greenrobot:eventbus:3.2.0'
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:3.0.4'
    implementation 'com.github.JessYanCoding:AndroidAutoSize:v1.2.1'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.hamcrest:hamcrest-all:1.3'
    testImplementation 'org.mockito:mockito-all:1.10.19'
    testImplementation 'org.robolectric:robolectric:4.5.1'
    testImplementation 'org.robolectric:shadows-multidex:4.5.1'
    testImplementation 'org.assertj:assertj-core:3.16.1'
    testImplementation 'com.natpryce:make-it-easy:4.0.1'

    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.2'

    implementation 'com.facebook.flipper:flipper:0.127.0'
    implementation 'com.facebook.soloader:soloader:0.10.3'

}

repositories {
    jcenter()
    google()
}

configurations.all {
    resolutionStrategy.force 'com.squareup.okhttp:okhttp-urlconnection:2.2.0'
    resolutionStrategy.force 'com.squareup.okhttp:okhttp:2.2.0'
    resolutionStrategy.force 'com.android.support:support-core-ui:26.1.0'
    resolutionStrategy.force 'com.google.code.gson:gson:2.4'
}

task bundleInstall(type: Exec) {
    workingDir "$projectDir/../functionalTests"
    executable 'bundle'
    args 'install'
}

task functionalTests(type: Exec, dependsOn: ['bundleInstall', 'assembleLocalDebug']) {
    description 'Run Calabash Tests against specified apk (-PapkPath)'
    group JavaBasePlugin.VERIFICATION_GROUP
    workingDir "$projectDir/../functionalTests"

    def targetPath

    if (project.hasProperty("apkPath")) {
        targetPath = "$apkPath"
    } else {
        targetPath = "$projectDir/build/outputs/apk/app-local-debug.apk"
    }

    executable 'calabash-android'
    args "run", "$targetPath", "--tags @dev --format html --out reports.html"
}

task upgradeTestSetup(type: Exec, dependsOn: ['bundleInstall']) {
    group JavaBasePlugin.VERIFICATION_GROUP
    workingDir "$projectDir/../functionalTests"

    executable 'calabash-android'
    args "run", "$projectDir/../functionalTests/oldVersionApk/app-upgrade-v1.11.82-debug.apk", "--tags @upgrade_setup --format html --out upgrade_test_setup_reports.html"
}

task upgradeTests(type: Exec, dependsOn: ['bundleInstall', 'upgradeTestSetup', 'assembleUpgradeDebug']) {
    description 'Run Calabash Tests against specified apk (-PapkPath)'
    group JavaBasePlugin.VERIFICATION_GROUP
    workingDir "$projectDir/../functionalTests"

    def targetPath

    if (project.hasProperty("apkPath")) {
        targetPath = "$apkPath"
    } else {
        targetPath = "$projectDir/build/outputs/apk/app-upgrade-debug.apk"
    }

    executable 'calabash-android'
    args "run", "$targetPath", "--tags @upgrade --format html --out upgrade_test_reports.html"
}

task regressionTests(type: Exec, dependsOn: ['bundleInstall', 'assembleRegressionDebug']) {
    description 'Run Calabash Tests against specified apk (-PapkPath)'
    group JavaBasePlugin.VERIFICATION_GROUP
    workingDir "$projectDir/../functionalTests"

    def targetPath

    if (project.hasProperty("apkPath")) {
        targetPath = "$apkPath"
    } else {
        targetPath = "$projectDir/build/outputs/apk/app-regression-debug.apk"
    }

    executable 'calabash-android'
    args "run", "$targetPath", "--tags @regression --format html --out regression_test_reports.html"
}

task weeklyTests(type: Exec, dependsOn: ['bundleInstall', 'assembleRegressionDebug']) {
    description 'Run Calabash Tests against specified apk (-PapkPath)'
    group JavaBasePlugin.VERIFICATION_GROUP
    workingDir "$projectDir/../functionalTests"

    def targetPath

    if (project.hasProperty("apkPath")) {
        targetPath = "$apkPath"
    } else {
        targetPath = "$projectDir/build/outputs/apk/app-regression-debug.apk"
    }

    executable 'calabash-android'
    args "run", "$targetPath", "--tags @weekly --format html --out weekly_test_reports.html"
}

task stressTests(type: Exec, dependsOn: ['bundleInstall', 'assembleRegressionDebug']) {
    description 'Run Calabash Tests against specified apk (-PapkPath)'
    group JavaBasePlugin.VERIFICATION_GROUP
    workingDir "$projectDir/../functionalTests"

    def targetPath

    if (project.hasProperty("apkPath")) {
        targetPath = "$apkPath"
    } else {
        targetPath = "$projectDir/build/outputs/apk/app-regression-debug.apk"
    }

    executable 'calabash-android'
    args "run", "$targetPath", "--tags @STRESS_TEST --format html --out stress_test_report.html"
}

task monkeyTests(type: Exec, dependsOn: ['bundleInstall', 'assembleProdsimDebug']) {
    description 'Run Calabash Tests against specified apk (-PapkPath)'
    group JavaBasePlugin.VERIFICATION_GROUP
    workingDir "$projectDir/../functionalTests"

    def targetPath

    if (project.hasProperty("apkPath")) {
        targetPath = "$apkPath"
    } else {
        targetPath = "$projectDir/build/outputs/apk/app-prodsim-debug.apk"
    }

    executable 'calabash-android'
    args "run", "$targetPath", "--tags @monkey --format html --out monkey_test_report.html"
}
