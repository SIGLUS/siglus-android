apply plugin: 'jacoco'

def jacocoCoverageThreshold = 0.53
def buildDir = "$project.buildDir"
def jacocoFileFilter = [
        '**/R.class',
        '**/R$*.class',
        '**/*$ViewInjector*.*',
        '**/*$ViewBinder*.*',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        'android/**',
        'com/google/**',
        'com/intellij/**',
        'junit/**',
        'net/**',
        'okhttp/**',
        'org/**',
        'rx/**',
        '**/*_MembersInjector.class',
        '**/Dagger*Component.class', // covers component implementations
        '**/Dagger*Component$Builder.class', // covers component builders
        '**/*Module_*Factory.class'
]
def coverageSourceDirs = ["./src/main/java"]
def javaClasses = fileTree(
        dir: "$buildDir/intermediates/javac/localDebug/classes/org",
        excludes: jacocoFileFilter
)

jacoco {
    toolVersion "0.8.6"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task jacocoTestReport(type: JacocoReport, dependsOn: "testLocalDebugUnitTest") {
    group = "Reporting"
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled false
        html.destination file("$buildDir/jacoco")
        xml.destination file("../build/reports/jacocoTestReport.xml")
    }
    classDirectories.from = files([javaClasses])
    sourceDirectories.from = files([coverageSourceDirs])
    additionalSourceDirs.from = files([coverageSourceDirs])
    executionData.from = fileTree(dir: "$buildDir", includes: ["jacoco/testLocalDebugUnitTest.exec"])
}

task jacocoTestCoverageVerification(type: JacocoCoverageVerification, dependsOn: "jacocoTestReport") {
    classDirectories.from = files([javaClasses])
    sourceDirectories.from = files([coverageSourceDirs])
    additionalSourceDirs.from = files([coverageSourceDirs])
    executionData.from = fileTree(dir: "$buildDir", includes: ["jacoco/testLocalDebugUnitTest.exec"])
    violationRules {
        rule {
            limit {
                minimum = jacocoCoverageThreshold
            }
        }
    }
}
